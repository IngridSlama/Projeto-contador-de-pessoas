import numpy as np
import cv2


classificadorFace = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

def center(x, y, w, h):  # cria o centro do retangulo em volta do objeto
    x1 = int(w / 2)
    y1 = int(h / 2)
    cx = x + x1
    cy = y + y1
    return cx,cy

cap = cv2.VideoCapture(0)  #abre o video 

fgbg = cv2.createBackgroundSubtractorMOG2()  #objeto para fazer a mascara 

detects = []  # lista vazia 

posL = 300  #posição da linha na vertical 300 pixels
offset = 200

xy1 = (posL, 100)
xy2 = (posL, 500)



total = 0

up = 0
down = 0

while 1:
    ret, frame = cap.read()

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    cv2.imshow("gray", gray)

    fgmask = fgbg.apply(gray)
    #cv2.imshow("fgmask", fgmask)

    retval, th = cv2.threshold(fgmask, 200, 255, cv2.THRESH_BINARY)
    #cv2.imshow("th", th)

    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (4, 4))

    gradient = cv2.morphologyEx(th, cv2.MORPH_GRADIENT, kernel,iterations = 4 )
    cv2.imshow("dilation", gradient)

    opening = cv2.morphologyEx(gradient, cv2.MORPH_OPEN, kernel, iterations = 6)
    #cv2.imshow("opening", opening)

    dilation = cv2.dilate(opening,kernel,iterations = 8)
    #cv2.imshow("dilation", dilation)

    closing = cv2.morphologyEx(dilation, cv2.MORPH_CLOSE, kernel, iterations = 10)
    cv2.imshow("closing", closing)

    
    cv2.line(frame,xy1,xy2,(255,0,135),2) # espeçura 3

    cv2.line(frame,(posL-offset,xy1[1]),(posL-offset,xy2[1]),(0,255,177),2)

    cv2.line(frame,(posL+offset,xy1[1]),(posL+offset,xy2[1]),(0,255,177),2)

    contours, hierarchy = cv2.findContours(closing,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE) 
    i = 0
    for cnt in contours:
        (x,y,w,h) = cv2.boundingRect(cnt) #cria atraves do contorno o dimensionamento do objeto

        area = cv2.contourArea(cnt)
        
        if int(area) > 4000 : #checa se a area do abjeto é suficiente 
            centro = center(x, y, w, h)

            cv2.putText(frame, str(i), (x+5, y+15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255),2) #mostra a contagem de pessoas
            cv2.circle(frame, centro, 4, (0, 0,135), -1) # tamanho do circulo, cor vermelha, circulo preenchido
            cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,0),2) #cria um retangulo verde em volta das pessoas
            if len(detects) <= i: 
                detects.append([])
            if centro[1]> posL-offset and centro[1] < posL+offset:
                detects[i].append(centro)
            else:
                detects[i].clear()
            i += 1

    if i == 0:
        detects.clear()

    i = 0

    if len(contours) == 0:
        detects.clear()

    else:

        for detect in detects:
            for (c,l) in enumerate(detect):


                if detect[c-1][1] < posL and l[1] > posL :
                    detect.clear()
                    up+=1
                    total = total -1
                    cv2.line(frame,xy1,xy2,(0,255,0),5)
                    continue

                if detect[c-1][1] > posL and l[1] < posL:
                    detect.clear()
                    down+=1
                    total+=1
                    cv2.line(frame,xy1,xy2,(0,0,255),5)
                    continue

                if c > 0:
                    cv2.line(frame,detect[c-1],l,(0,0,255),1)

    cv2.putText(frame, "TOTAL: "+str(total), (10, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255),2)
    cv2.putText(frame, "SAINDO : "+str(up), (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0),2)
    cv2.putText(frame, "ENTRANDO: "+str(down), (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255),2)

    cv2.imshow("frame", frame)

    if cv2.waitKey(30) & 0xFF == ord('s'):
        break

cap.release()
cv2.destroyAllWindows()
